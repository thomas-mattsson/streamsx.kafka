Overview
========

Provides functions to read messages from a Kafka broker as a stream
and submit tuples to a Kafka broker as messages.

The broker configuration must be done with properties in an application configuration.
The minimum set of properties must contain the `bootstrap.servers` configuration, which is valid
for both consumers and producers, i.e. for the `subscribe` and `publish` functions.

It is also possible to use different application configurations for subscribe and publish
when special consumer or producer configs must be used.

Sample
======

A simple hello world example of a Streams application publishing to
a topic and the same application consuming the same topic::

    from streamsx.topology.topology import Topology
    from streamsx.topology.schema import CommonSchema
    from streamsx.topology.context import submit
    import streamsx.kafka as kafka

    topo = Topology('KafkaHelloWorld')

    to_kafka = topo.source(['Hello', 'World!'])
    to_kafka = to_kafka.as_string()
    # TODO: delay the source to give the consumer a chance to get ready

    # Publish a stream to Kafka using TEST topic
    kafka.publish(to_kafka, topic='TEST', appConfigName='kafka_props')

    # Subscribe to same topic as a stream
    from_kafka = kafka.subscribe(topo, schema=CommonSchema.String, topic='TEST', appConfigName='kafka_props')

    from_kafka.print()

    # TODO: how to submit locally?
    submit('STREAMING_ANALYTICS_SERVICE', topo)

Documentation
=============

* `streamsx.kafka package documentation <http://streamsxkafka.readthedocs.io/en/pypackage/>`_
